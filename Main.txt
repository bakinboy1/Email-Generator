package emailer;

import javax.swing.JFrame;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Iterator;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.net.URISyntaxException;

public class Main extends JFrame {

	private static final long serialVersionUID = 1L;

	// connect program to desired excel file

	private static Workbook workbook;

	public static void main(String[] args) throws URISyntaxException {
		//sometimes gets weird error where it populates list twice
		Console.run2();

		
	}

	public static Main main = new Main();
	// create arraylist to store excel file
	public void gogo() {
		// temporary variables to store excel data for 1 row.
		// probably some way to make it more efficient than using nextCell. go by column
		// # or something
		String serial = "";
		String first = "";
		String last = "";
		String location = "";
		// could be changed to boolean
		String done = "";
		int jump;

		try {

			// initialize reading of excel file
			FileInputStream excelFile = new FileInputStream(new File(FileName.getFile()));

			workbook = new XSSFWorkbook(excelFile);

			// gets workbook sheet, usually 0, can be other values in case of multiple
			// sheets
			Sheet datatypeSheet = workbook.getSheetAt(0);

			// initialize iterator for new rows
			Iterator<Row> iterator = datatypeSheet.iterator();

			// while there is a row with data it will keep going
			while (iterator.hasNext()) {

				// increment var reset. stores iterator position
				jump = 0;

				// adds temp data to arraylist
				Arr.getArr().getList().add(new Person(serial, first, last, location, done));

				// since only some columns of 'completed' are populated, the 'done' variable has
				// to be reset to null
				// otherwise the status will remain as yes, after the first yes, since that is
				// the only other variable state
				done = "";

				// initialize row iterator
				Row currentRow = iterator.next();

				// initialize cell iterator
				Iterator<Cell> cellIterator = currentRow.iterator();

				// while there is data in a cell, it will keep iterating to the right to the
				// next cell
				while (cellIterator.hasNext()) {

					// increments column/cell value
					jump++;

					// create cell object
					Cell currentCell = cellIterator.next();

					// if cell contains string & isnt null value, will jump to subgroup of if
					// statements
					if (currentCell.getCellType() == CellType.STRING && currentCell.getCellType() != null) {

						// depending on position, store in corresponding temp value
						// probably a better way to do this
						// System.out.println(jump);
						if (jump == 1) {
							serial = currentCell.getStringCellValue();
						}
						if (jump == 2) {
							first = currentCell.getStringCellValue();
						}
						if (jump == 3) {
							last = currentCell.getStringCellValue();
						}
						if (jump == 4) {
							location = currentCell.getStringCellValue();
						}
						if (jump == 5) {
							done = currentCell.getStringCellValue().replaceAll("\\s+", "");
						}
					} else if (currentCell.getCellType() == CellType.NUMERIC) {
					}

					// if cellIncrementer encounters empty cell it breaks loop and moves down to
					// next row
					else if (currentCell.getCellType() == null) {
						break;
					}
				}

			}
			for (int i = Arr.getArr().getList().size() - 1; i > 0; i--) {
				if (Arr.getArr().getList().get(i).getDone().equalsIgnoreCase("yes")) {
					Arr.getArr().getList().remove(i);
				}
			}
			// removes column headers row from list
			Arr.getArr().getList().remove(0);

			// removes people from list if they are already completed
			WindowGui.frame.fill(Arr.getArr());
			WindowGui.frame.run();

			// error catch messages
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
